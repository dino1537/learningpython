{
    "Updates": "sudo pacman -Syyu",
    "Fibonacci": "def fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        print(a, end=' ')\n        a, b = b, a + b\n\nfibonacci(5)",
    "Date": "from datetime import datetime, timedelta\n\nnow = datetime.now()\nfuture_date = now + timedelta(days=7)\nprint(future_date)",
    "Email": "import smtplib\n\nsender_email = \"your_email@gmail.com\"\nreceiver_email = \"recipient_email@gmail.com\"\nmessage = \"Hello, this is a test email from Python!\"\n\nwith smtplib.SMTP(\"smtp.gmail.com\", 587) as server:\n    server.starttls()\n    server.login(sender_email, \"your_password\")\n    server.sendmail(sender_email, receiver_email, message)",
    "Url-Text": "import re\n\ntext = \"Visit my website: https://www.example.com\"\nurls = re.findall('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\\\(\\\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', text)\nprint(urls)",
    "ReadFileLineByLine": "with open('file.txt', 'r') as file:\n    for line in file:\n        print(line.strip())",
    "JSONHandling": "import json\n\ndata = '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'\nuser_info = json.loads(data)\nprint(user_info['name'])",
    "WebScraping": "from bs4 import BeautifulSoup\nimport requests\n\nurl = 'https://www.example.com'\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\nprint(soup.title.text)",
    "Asyncio": "import asyncio\n\nasync def hello():\n    print(\"Hello\")\n\nasyncio.run(hello())",
    "FlaskWebApp": "from flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return 'Hello, World!'\n\nif __name__ == '__main__':\n    app.run()",
    "PyTest": "def add(x, y):\n    return x + y\n\ndef test_add():\n    assert add(2, 3) == 5",
    "WorkingWithDates": "from datetime import datetime, timedelta\n\nnow = datetime.now()\nfuture_date = now + timedelta(days=7)\nprint(future_date)",
    "SMTPEmail": "import smtplib\n\nsender_email = \"your_email@gmail.com\"\nreceiver_email = \"recipient_email@gmail.com\"\nmessage = \"Hello, this is a test email from Python!\"\n\nwith smtplib.SMTP(\"smtp.gmail.com\", 587) as server:\n    server.starttls()\n    server.login(sender_email, \"your_password\")\n    server.sendmail(sender_email, receiver_email, message)",
    "RegexURLs": "import re\n\ntext = \"Visit my website: https://www.example.com\"\nurls = re.findall('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\\\(\\\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', text)\nprint(urls)",
    "FileManipulation": "with open('file.txt', 'r') as file:\n    content = file.read()\n    # Perform operations on content",
    "ListComprehension": "numbers = [1, 2, 3, 4, 5]\nsquares = [x**2 for x in numbers]\nprint(squares)",
    "LambdaFunction": "multiply = lambda x, y: x * y\nresult = multiply(3, 4)\nprint(result)",
    "DictionaryOperations": "person = {'name': 'John', 'age': 30}\n# Add a new key-value pair\nperson['city'] = 'New York'\nprint(person)",
    "PandasDataFrame": "import pandas as pd\n\n# Create a DataFrame\ndata = {'Name': ['John', 'Alice'], 'Age': [28, 24]}\ndf = pd.DataFrame(data)\nprint(df)",
    "RandomModule": "import random\n\n# Generate a random number between 1 and 10\nrandom_number = random.randint(1, 10)\nprint(random_number)",
    "MapFunction": "numbers = [1, 2, 3, 4, 5]\ndoubled = list(map(lambda x: x * 2, numbers))\nprint(doubled)",
    "ListSorting": "fruits = ['apple', 'banana', 'orange']\nfruits.sort()\nprint(fruits)",
    "FileWrite": "with open('output.txt', 'w') as file:\n    file.write('Hello, World!')",
    "ListFilter": "numbers = [1, 2, 3, 4, 5]\neven_numbers = list(filter(lambda x: x % 2 == 0, numbers))\nprint(even_numbers)",
    "ExceptionHandling": "try:\n    result = 10 / 0\nexcept ZeroDivisionError as e:\n    print(f'Error: {e}')",
    "SetOperations": "set1 = {1, 2, 3}\nset2 = {3, 4, 5}\nunion_set = set1.union(set2)\nprint(union_set)",
    "CSVHandling": "import csv\n\ndata = [['Alice', 25], ['Bob', 30], ['Charlie', 22]]\nwith open('data.csv', 'w', newline='') as file:\n    writer = csv.writer(file)\n    writer.writerows(data)",
    "ClassDefinition": "class Dog:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\nmy_dog = Dog('Buddy', 3)\nprint(my_dog.name)",
    "ListReverse": "numbers = [1, 2, 3, 4, 5]\nreversed_numbers = list(reversed(numbers))\nprint(reversed_numbers)",
    "DictionaryComprehension": "numbers = [1, 2, 3, 4, 5]\nsquare_dict = {x: x**2 for x in numbers}\nprint(square_dict)",
    "JSONWrite": "import json\n\ndata = {'name': 'John', 'age': 30, 'city': 'New York'}\nwith open('data.json', 'w') as file:\n    json.dump(data, file)",
    "SubstringCheck": "text = 'Hello, World!'\nif 'Hello' in text:\n    print('Substring found')",
    "ListRemoveDuplicates": "numbers = [1, 2, 2, 3, 4, 4, 5]\nunique_numbers = list(set(numbers))\nprint(unique_numbers)",
    "RandomChoice": "import random\n\nfruits = ['apple', 'banana', 'orange']\nrandom_fruit = random.choice(fruits)\nprint(random_fruit)",
    "TupleOperations": "point = (3, 4)\nx, y = point\nprint(f'x: {x}, y: {y}')",
    "DictionaryGet": "person = {'name': 'Alice', 'age': 25}\nage = person.get('age', 'Age not found')\nprint(age)",
    "ListExtend": "list1 = [1, 2, 3]\nlist2 = [4, 5, 6]\nlist1.extend(list2)\nprint(list1)",
    "ShufflingList": "import random\n\nnumbers = [1, 2, 3, 4, 5]\nrandom.shuffle(numbers)\nprint(numbers)",
    "EnumerateList": "fruits = ['apple', 'banana', 'orange']\nfor index, fruit in enumerate(fruits):\n    print(f'Index: {index}, Fruit: {fruit}')",
    "ListSlice": "numbers = [1, 2, 3, 4, 5]\nsliced_list = numbers[1:4]\nprint(sliced_list)",
    "ConvertToList": "string = 'Hello'\nchar_list = list(string)\nprint(char_list)",
    "DictionaryKeysValues": "person = {'name': 'Bob', 'age': 30}\nkeys = person.keys()\nvalues = person.values()\nprint(keys, values)",
    "ListMinMax": "numbers = [1, 2, 3, 4, 5]\nmin_number = min(numbers)\nmax_number = max(numbers)\nprint(min_number, max_number)",
    "ListZip": "names = ['Alice', 'Bob', 'Charlie']\nages = [25, 30, 22]\nzipped_data = list(zip(names, ages))\nprint(zipped_data)",
    "StringJoin": "words = ['Hello', 'World']\njoined_string = ' '.join(words)\nprint(joined_string)",
    "DictionaryUpdate": "person = {'name': 'Charlie', 'age': 22}\nupdate_data = {'city': 'Paris'}\nperson.update(update_data)\nprint(person)",
    "ListCount": "numbers = [1, 2, 2, 3, 4, 4, 5]\ncount_of_2 = numbers.count(2)\nprint(count_of_2)",
    "FunctionDefaultArguments": "def greet(name='Guest'):\n    print(f'Hello, {name}!')\ngreet('Alice')",
    "ListClear": "numbers = [1, 2, 3, 4, 5]\nnumbers.clear()\nprint(numbers)",
    "ListPop": "fruits = ['apple', 'banana', 'orange']\nlast_fruit = fruits.pop()\nprint(last_fruit)",
    "DictionaryPopItem": "person = {'name': 'David', 'age': 28, 'city': 'London'}\npopped_item = person.popitem()\nprint(popped_item)",
    "StringFormat": "name = 'John'\nage = 30\nformatted_string = f'My name is {name} and I am {age} years old'\nprint(formatted_string)",
    "ListIndex": "numbers = [1, 2, 3, 4, 5]\nindex_of_3 = numbers.index(3)\nprint(index_of_3)",
    "ListInsert": "numbers = [1, 2, 3, 4, 5]\nnumbers.insert(2, 10)\nprint(numbers)",
    "StringCapitalize": "text = 'hello, world!'\ncapitalized_text = text.capitalize()\nprint(capitalized_text)",
    "FunctionVariableArguments": "def display(*args):\n    for arg in args:\n        print(arg)\ndisplay('apple', 'banana', 'orange')",
    "StringReverse": "text = 'Hello, World!'\nreversed_text = text[::-1]\nprint(reversed_text)",
    "ListRemove": "fruits = ['apple', 'banana', 'orange']\nfruits.remove('banana')\nprint(fruits)",
    "StringReplace": "text = 'Hello, World!'\nnew_text = text.replace('World', 'Python')\nprint(new_text)",
    "BasicArithmetic": "result = 3 + 5 * 2 / 4\nprint(result)",
    "Exponentiation": "result = 2 ** 3\nprint(result)",
    "SquareRoot": "import math\n\nnumber = 16\nsquare_root = math.sqrt(number)\nprint(square_root)",
    "AbsoluteValue": "number = -10\nabsolute_value = abs(number)\nprint(absolute_value)",
    "RoundingNumbers": "number = 3.14159\nrounded_number = round(number, 2)\nprint(rounded_number)",
    "TrigonometricFunctions": "import math\n\nangle_in_radians = math.radians(30)\nsine_value = math.sin(angle_in_radians)\nprint(sine_value)",
    "Logarithm": "import math\n\nnumber = 100\nlogarithm_base_10 = math.log10(number)\nprint(logarithm_base_10)",
    "CeilingFunction": "import math\n\nnumber = 4.5\nceiled_number = math.ceil(number)\nprint(ceiled_number)",
    "FloorFunction": "import math\n\nnumber = 4.5\nfloored_number = math.floor(number)\nprint(floored_number)",
    "Factorial": "import math\n\nnumber = 5\nfactorial_result = math.factorial(number)\nprint(factorial_result)",
    "GCD": "import math\n\na, b = 24, 36\ngcd_result = math.gcd(a, b)\nprint(gcd_result)",
    "PowerFunction": "result = pow(2, 3)\nprint(result)",
    "RadiansToDegrees": "import math\n\nangle_in_radians = math.pi / 2\nangle_in_degrees = math.degrees(angle_in_radians)\nprint(angle_in_degrees)",
    "DegreesToRadians": "import math\n\nangle_in_degrees = 90\nangle_in_radians = math.radians(angle_in_degrees)\nprint(angle_in_radians)",
    "HyperbolicFunctions": "import math\n\nangle = 30\nhyperbolic_sine = math.sinh(angle)\nhyperbolic_cosine = math.cosh(angle)\nprint(hyperbolic_sine, hyperbolic_cosine)",
    "ArcTan2Function": "import math\n\nx, y = 1, 1\nangle = math.atan2(y, x)\nprint(angle)",
    "DegreesNormalization": "import math\n\nangle_in_degrees = 540\nnormalized_angle = math.degrees(math.radians(angle_in_degrees)) % 360\nprint(normalized_angle)",
    "HypotenuseLength": "import math\n\na, b = 3, 4\nhypotenuse = math.hypot(a, b)\nprint(hypotenuse)",
    "EulerNumber": "import math\n\neuler_number = math.e\nprint(euler_number)",
    "PiValue": "import math\n\npi_value = math.pi\nprint(pi_value)",
    "RandomNumberInRange": "import random\n\nrandom_number = random.uniform(1, 10)\nprint(random_number)",
    "LinearInterpolation": "import numpy as np\n\nx_values = [1, 2, 3]\ny_values = [2, 4, 8]\ninterpolated_value = np.interp(2.5, x_values, y_values)\nprint(interpolated_value)",
    "SolveLinearEquation": "from sympy import symbols, Eq, solve\n\nx = symbols('x')\nequation = Eq(2*x - 1, 0)\nsolution = solve(equation, x)\nprint(solution)",
    "MatrixMultiplication": "import numpy as np\n\nmatrix1 = np.array([[1, 2], [3, 4]])\nmatrix2 = np.array([[5, 6], [7, 8]])\nresult_matrix = np.dot(matrix1, matrix2)\nprint(result_matrix)",
    "CalculateMean": "import statistics\n\nnumbers = [1, 2, 3, 4, 5]\nmean_value = statistics.mean(numbers)\nprint(mean_value)",
    "CalculateMedian": "import statistics\n\nnumbers = [1, 2, 3, 4, 5]\nmedian_value = statistics.median(numbers)\nprint(median_value)",
    "CalculateMode": "from statistics import mode\n\nnumbers = [1, 2, 2, 3, 4, 4, 5]\nmode_value = mode(numbers)\nprint(mode_value)",
    "CalculateVariance": "import statistics\n\nnumbers = [1, 2, 3, 4, 5]\nvariance_value = statistics.variance(numbers)\nprint(variance_value)",
    "CalculateStandardDeviation": "import statistics\n\nnumbers = [1, 2, 3, 4, 5]\nstd_deviation = statistics.stdev(numbers)\nprint(std_deviation)",
    "CalculatePercentile": "import numpy as np\n\nnumbers = [1, 2, 3, 4, 5]\npercentile_value = np.percentile(numbers, 75)\nprint(percentile_value)",
    "CalculateCovariance": "import numpy as np\n\nx = [1, 2, 3, 4, 5]\ny = [2, 3, 4, 5, 6]\ncovariance_matrix = np.cov(x, y)\nprint(covariance_matrix)",
    "CalculateCorrelationCoefficient": "import numpy as np\n\nx = [1, 2, 3, 4, 5]\ny = [2, 3, 4, 5, 6]\ncorrelation_coefficient = np.corrcoef(x, y)[0, 1]\nprint(correlation_coefficient)",
    "SolveQuadraticEquation": "import cmath\n\na, b, c = 1, -3, 2\nroot1 = (-b + cmath.sqrt(b**2 - 4*a*c)) / (2*a)\nroot2 = (-b - cmath.sqrt(b**2 - 4*a*c)) / (2*a)\nprint(root1, root2)",
    "CalculateLCM": "from math import lcm\n\nnumbers = [4, 5, 6]\nlcm_value = lcm(*numbers)\nprint(lcm_value)",
    "CalculateLCMofList": "import numpy as np\n\nnumbers = [4, 5, 6]\nlcm_value = np.lcm.reduce(numbers)\nprint(lcm_value)",
    "CalculateGCDofList": "import numpy as np\n\nnumbers = [24, 36, 48]\ngcd_value = np.gcd.reduce(numbers)\nprint(gcd_value)",
    "CalculateBinomialCoefficient": "from math import comb\n\nn, k = 5, 2\nbinomial_coefficient = comb(n, k)\nprint(binomial_coefficient)",
    "CalculatePermutations": "from math import perm\n\nn, r = 5, 2\npermutations = perm(n, r)\nprint(permutations)",
    "CalculateSineInverse": "import math\n\nangle_in_radians = 0.5\nsine_inverse = math.asin(angle_in_radians)\nprint(sine_inverse)",
    "CalculateCosineInverse": "import math\n\nangle_in_radians = 0.5\ncosine_inverse = math.acos(angle_in_radians)\nprint(cosine_inverse)",
    "CalculateTangentInverse": "import math\n\nangle_in_radians = 0.5\ntangent_inverse = math.atan(angle_in_radians)\nprint(tangent_inverse)",
    "CalculateHypotenuseAngle": "import math\n\nopposite = 3\nadjacent = 4\nhypotenuse_angle = math.atan2(opposite, adjacent)\nprint(hypotenuse_angle)"
  
}
